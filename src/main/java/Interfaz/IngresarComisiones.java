

package Interfaz;

import com.mycompany.proyectonomina.sql.CConexion;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;


public class IngresarComisiones extends javax.swing.JFrame {
     private CConexion conexion;

    public IngresarComisiones() {
        initComponents();
        conexion = new CConexion();
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCodigoEmpleado = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btbIngresarComision = new javax.swing.JButton();
        btbCancelar = new javax.swing.JButton();
        txtEmpleado = new javax.swing.JTextField();
        txtPuesto = new javax.swing.JTextField();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("INGRESO DE COMISIONES");

        jLabel2.setText("CODIGO EMPLEADO:");

        txtCodigoEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoEmpleadoActionPerformed(evt);
            }
        });

        jLabel3.setText("Nombre Empleado:");

        jLabel4.setText("Puesto:");

        btbIngresarComision.setText("Ingresar Comisión");
        btbIngresarComision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btbIngresarComisionActionPerformed(evt);
            }
        });

        btbCancelar.setText("Cancelar");
        btbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btbCancelarActionPerformed(evt);
            }
        });

        txtPuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPuestoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCodigoEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btbIngresarComision, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(146, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(212, 212, 212))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCodigoEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btbIngresarComision)
                    .addComponent(btbCancelar))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCodigoEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoEmpleadoActionPerformed
        try {
            int idEmpleado = Integer.parseInt(txtCodigoEmpleado.getText());
            // Obtener el nombre y el idPuesto
            Map<String, Integer> empleadoInfo = obtenerNombreYPuesto(idEmpleado);
            
            if (!empleadoInfo.isEmpty()) {
                String nombreCompleto = empleadoInfo.keySet().iterator().next(); // Obtiene el nombre completo
                int idPuesto = empleadoInfo.get(nombreCompleto); // Obtiene el id del puesto

                txtEmpleado.setText(nombreCompleto);

                // Obtener la descripción del puesto usando el idPuesto
                String descripcionPuesto = obtenerDescripcionPuesto(idPuesto);
                txtPuesto.setText(descripcionPuesto != null ? descripcionPuesto : "Puesto no encontrado.");
            } else {
                txtEmpleado.setText("");
                txtPuesto.setText("");
                JOptionPane.showMessageDialog(this, "Empleado no encontrado.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID válido.", "Error", JOptionPane.ERROR_MESSAGE);
            txtEmpleado.setText("");
            txtPuesto.setText("");
        }
    }

    
    private String obtenerNombreEmpleado(int idEmpleado) {
        String nombre = null;
        Connection conn = null;

        try {
            conn = conexion.establecerConexion();
            PreparedStatement stmt = conn.prepareStatement("SELECT nombre, apellido FROM Empleado WHERE id_empleado = ?");
            stmt.setInt(1, idEmpleado);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                nombre = rs.getString("nombre").trim() + " " + rs.getString("apellido").trim();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener datos del empleado.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error al cerrar la conexión.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        return nombre;
    }
        private String obtenerDescripcionPuesto(int idPuesto) {
        String descripcion = null;
        Connection conn = null;

        try {
            conn = conexion.establecerConexion();
            PreparedStatement stmt = conn.prepareStatement("SELECT descripcion FROM Puesto WHERE id_puesto = ?");
            stmt.setInt(1, idPuesto);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                descripcion = rs.getString("descripcion").trim();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener la descripción del puesto.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error al cerrar la conexión.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        return descripcion;
}

      private Map<String, Integer> obtenerNombreYPuesto(int idEmpleado) {
        Map<String, Integer> empleadoInfo = new HashMap<>();
        Connection conn = null;

        try {
            conn = conexion.establecerConexion();
            PreparedStatement stmt = conn.prepareStatement("SELECT nombre, apellido, id_puesto FROM Empleado WHERE id_empleado = ?");
            stmt.setInt(1, idEmpleado);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                String nombreCompleto = rs.getString("nombre").trim() + " " + rs.getString("apellido").trim();
                int idPuesto = rs.getInt("id_puesto");
                empleadoInfo.put(nombreCompleto, idPuesto);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener datos del empleado.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error al cerrar la conexión.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        return empleadoInfo;
}
        private int obtenerIdPuesto(int idEmpleado) {
        int idPuesto = -1; // Valor por defecto si no se encuentra
        Connection conn = null;

        try {
            conn = conexion.establecerConexion();
            PreparedStatement stmt = conn.prepareStatement("SELECT id_puesto FROM Empleado WHERE id_empleado = ?");
            stmt.setInt(1, idEmpleado);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                idPuesto = rs.getInt("id_puesto");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener el ID del puesto del empleado.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error al cerrar la conexión.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        return idPuesto;
    }
        private boolean esProduccion(int idPuesto) {
        return idPuesto == 2;
    }

    private boolean esVentas(int idPuesto) {
        return idPuesto == 1;
    


    }//GEN-LAST:event_txtCodigoEmpleadoActionPerformed

    private void txtPuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPuestoActionPerformed
     
    }//GEN-LAST:event_txtPuestoActionPerformed

    private void btbIngresarComisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btbIngresarComisionActionPerformed
          try {
        int idEmpleado = Integer.parseInt(txtCodigoEmpleado.getText());
        int idPuesto = obtenerIdPuesto(idEmpleado); // Obtener el id del puesto

        if (idPuesto != -1) {
            if (esProduccion(idPuesto)) {
                // Redirigir a la ventana ComisionProduccion pasando idEmpleado
                ComisionProduccion ventanaProduccion = new ComisionProduccion(idEmpleado);
                ventanaProduccion.setVisible(true);
                this.dispose(); // Cierra la ventana actual si es necesario
            } else if (esVentas(idPuesto)) {
                // Redirigir a la ventana ComisionVentas pasando idEmpleado
                ComisionVentas ventanaVentas = new ComisionVentas(idEmpleado);
                ventanaVentas.setVisible(true);
                this.dispose(); // Cierra la ventana actual si es necesario
            } else {
                JOptionPane.showMessageDialog(this, "El empleado no pertenece a Producción o Ventas.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Error al obtener el puesto del empleado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID de empleado válido.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btbIngresarComisionActionPerformed

    private void btbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btbCancelarActionPerformed
        Dashboard ventanaprincipal = new Dashboard();
        ventanaprincipal.setVisible(true); 
        this.dispose();
    }//GEN-LAST:event_btbCancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresarComisiones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresarComisiones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresarComisiones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresarComisiones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new IngresarComisiones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btbCancelar;
    private javax.swing.JButton btbIngresarComision;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtCodigoEmpleado;
    private javax.swing.JTextField txtEmpleado;
    private javax.swing.JTextField txtPuesto;
    // End of variables declaration//GEN-END:variables
}
